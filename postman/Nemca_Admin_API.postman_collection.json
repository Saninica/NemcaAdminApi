{
	"info": {
		"_postman_id": "nemca-admin-api-collection",
		"name": "Nemca Admin API",
		"description": "Complete API collection for Nemca Admin CMS - A multi-tenant content management system with multi-language support.\n\n## 🚀 Getting Started\n\n1. **Set Environment Variables**: Create a new environment with the following variables:\n   - `base_url`: Your API base URL (e.g., `http://localhost:8000`)\n   - `token`: Will be auto-populated after login\n   - `website_id`: Your website ID (will be set after login)\n\n2. **Authentication Flow**:\n   - Register a new user (send plaintext password - secure hashing on server)\n   - Login with existing credentials\n   - Token will be automatically stored and used for subsequent requests\n   - Use logout endpoint to invalidate tokens server-side\n\n3. **Multi-tenant Support**:\n   - Regular users can only access their own website data\n   - Superusers can access all websites\n\n## 🔒 Security Features\n\n- **Secure Password Handling**: Server-side only password hashing\n- **JWT Token Invalidation**: Server-side logout with token blacklisting\n- **Role-based Access Control**: Multi-tenant security model\n- **Enhanced Authentication**: JTI-based token tracking\n\n## 🏗️ API Architecture\n\n- **FastAPI** with async/await patterns\n- **JWT Authentication** with 30-minute expiration + server-side invalidation\n- **PostgreSQL** database with SQLAlchemy\n- **Multi-language** content support\n- **File upload** capabilities\n- **Dynamic form metadata** with enhanced validation\n- **Consistent API design** patterns\n\n## 📋 Content-Type Standards\n\n- **JSON endpoints**: `application/json` for data-only operations\n- **File upload endpoints**: `multipart/form-data` for operations with files\n- **Consistent patterns**: Same Content-Type for create/update per resource type",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-add Authorization header for protected endpoints",
					"if (pm.variables.get('token') && pm.request.url.path.includes('/api/')) {",
					"    const excludedPaths = ['/api/user/register', '/api/user/login'];",
					"    const currentPath = pm.request.url.getPath();",
					"    const isExcluded = excludedPaths.some(path => currentPath.includes(path));",
					"    ",
					"    if (!isExcluded) {",
					"        pm.request.headers.add({",
					"            key: 'Authorization',",
					"            value: 'Bearer ' + pm.variables.get('token')",
					"        });",
					"    }",
					"}",
					"",
					"// Security note: Tokens are now invalidated server-side on logout",
					"// Make sure to use the logout endpoint to properly terminate sessions"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "🔐 Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"secretpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/register/",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "register", ""]
						},
						"description": "Register a new user account. Send plaintext password - secure hashing performed server-side only for maximum security."
					},
					"response": [
						{
							"name": "Successful Registration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"secretpassword123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/user/register/",
									"host": ["{{base_url}}"],
									"path": ["api", "user", "register", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\"\n}"
						},
						{
							"name": "Username Already Exists",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"existing_user\",\n    \"email\": \"new@example.com\",\n    \"password\": \"password123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/user/register/",
									"host": ["{{base_url}}"],
									"path": ["api", "user", "register", ""]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Kullanıcı adı zaten kullanılıyor.\"\n}"
						}
					]
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has access token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData).to.have.property('token_type');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    ",
									"    // Store token for subsequent requests",
									"    pm.environment.set('token', jsonData.access_token);",
									"    ",
									"    // Store user data",
									"    if (jsonData.user && jsonData.user.websites && jsonData.user.websites.length > 0) {",
									"        pm.environment.set('website_id', jsonData.user.websites[0].id);",
									"    }",
									"    ",
									"    pm.environment.set('user_id', jsonData.user.id);",
									"    pm.environment.set('is_superuser', jsonData.user.is_superuser);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "john_doe",
									"type": "text"
								},
								{
									"key": "password",
									"value": "secretpassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/user/login/",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "login", ""]
						},
						"description": "Login with username and password. Returns JWT token and user information."
					},
					"response": [
						{
							"name": "Successful Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "john_doe",
											"type": "text"
										},
										{
											"key": "password",
											"value": "secretpassword123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/user/login/",
									"host": ["{{base_url}}"],
									"path": ["api", "user", "login", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huX2RvZSIsImV4cCI6MTcwMzE3MjAwMCwianRpIjoiMTIzNDU2Nzg5MCJ9.example-signature\",\n    \"token_type\": \"bearer\",\n    \"user\": {\n        \"id\": 1,\n        \"username\": \"john_doe\",\n        \"email\": \"john@example.com\",\n        \"is_active\": true,\n        \"is_superuser\": false,\n        \"websites\": [\n            {\n                \"id\": 1,\n                \"name\": \"My Website\"\n            }\n        ]\n    }\n}"
						},
						{
							"name": "Invalid Credentials",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "john_doe",
											"type": "text"
										},
										{
											"key": "password",
											"value": "wrongpassword",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/user/login/",
									"host": ["{{base_url}}"],
									"path": ["api", "user", "login", ""]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Kullanıcı adı veya şifre yanlış.\"\n}"
						}
					]
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('websites');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/user/",
							"host": ["{{base_url}}"],
							"path": ["api", "user", ""]
						},
						"description": "Get current authenticated user information and associated websites."
					},
					"response": [
						{
							"name": "Current User Info",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/user/",
									"host": ["{{base_url}}"],
									"path": ["api", "user", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"is_active\": true,\n    \"is_superuser\": false,\n    \"websites\": [\n        {\n            \"id\": 1,\n            \"name\": \"My Website\"\n        }\n    ]\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/user/",
									"host": ["{{base_url}}"],
									"path": ["api", "user", ""]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Not authenticated\"\n}"
						}
					]
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Logout successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('logged out');",
									"    ",
									"    // Clear stored authentication data",
									"    pm.environment.unset('token');",
									"    pm.environment.unset('user_id');",
									"    pm.environment.unset('website_id');",
									"    pm.environment.unset('is_superuser');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/user/logout/",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "logout", ""]
						},
						"description": "Logout the current user and invalidate their JWT token on the server side."
					},
					"response": [
						{
							"name": "Successful Logout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/user/logout/",
									"host": ["{{base_url}}"],
									"path": ["api", "user", "logout", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Successfully logged out\"\n}"
						},
						{
							"name": "Unauthorized - Invalid Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer invalid_token"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/user/logout/",
									"host": ["{{base_url}}"],
									"path": ["api", "user", "logout", ""]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Geçersiz kimlik dogrulama bilgileri.\"\n}"
						}
					]
				},
				{
					"name": "Assign Website to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/website/?website_id=1",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "website", ""],
							"query": [
								{
									"key": "website_id",
									"value": "1"
								}
							]
						},
						"description": "Assign a website to the current user."
					}
				}
			],
			"description": "Authentication endpoints for user registration, login, and profile management."
		},
		{
			"name": "🌐 Website Management",
			"item": [
				{
					"name": "Get All Websites",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/website/",
							"host": ["{{base_url}}"],
							"path": ["api", "website", ""]
						},
						"description": "Get all websites. Regular users see only their websites, superusers see all."
					}
				},
				{
					"name": "Create Website",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "My Awesome Website",
									"type": "text"
								},
								{
									"key": "domain_url",
									"value": "https://myawesomewebsite.com",
									"type": "text"
								},
								{
									"key": "favicon_image",
									"type": "file",
									"src": "",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/website/",
							"host": ["{{base_url}}"],
							"path": ["api", "website", ""]
						},
						"description": "Create a new website with optional favicon upload."
					}
				},
				{
					"name": "Get Website by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/website/{{website_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "website", "{{website_id}}"]
						},
						"description": "Get specific website by ID."
					}
				},
				{
					"name": "Update Website",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Updated Website Name",
									"type": "text"
								},
								{
									"key": "domain_url",
									"value": "https://updated-domain.com",
									"type": "text"
								},
								{
									"key": "favicon_image",
									"type": "file",
									"src": "",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/website/{{website_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "website", "{{website_id}}", ""]
						},
						"description": "Update website information and favicon."
					}
				},
				{
					"name": "Delete Website",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/website/{{website_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "website", "{{website_id}}", ""]
						},
						"description": "Delete a website."
					}
				},
				{
					"name": "Get Website Complete Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/website/all-info/{{website_id}}/en/",
							"host": ["{{base_url}}"],
							"path": ["api", "website", "all-info", "{{website_id}}", "en", ""]
						},
						"description": "Get complete website information for a specific language."
					}
				}
			],
			"description": "Website management endpoints for creating and managing multiple websites."
		},
		{
			"name": "📄 Page Management",
			"item": [
				{
					"name": "Get All Pages",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/page/?skip=0&limit=100",
							"host": ["{{base_url}}"],
							"path": ["api", "page", ""],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Get all pages with pagination support."
					}
				},
				{
					"name": "Create Page",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"about_us\",\n    \"website_id\": {{website_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/page/",
							"host": ["{{base_url}}"],
							"path": ["api", "page", ""]
						},
						"description": "Create a new page. Website ID is auto-assigned for regular users."
					}
				},
				{
					"name": "Get Page by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/page/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "page", "1", ""]
						},
						"description": "Get specific page with its content."
					}
				},
				{
					"name": "Update Page",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"updated_page_name\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/page/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "page", "1", ""]
						},
						"description": "Update page information."
					}
				},
				{
					"name": "Delete Page",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/page/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "page", "1", ""]
						},
						"description": "Delete a page and all its content."
					}
				}
			],
			"description": "Page management endpoints for creating and organizing website pages."
		},
		{
			"name": "📝 Content Management",
			"item": [
				{
					"name": "Get All Page Contents",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/content/?skip=0&limit=10&page_id=1&language_id=1",
							"host": ["{{base_url}}"],
							"path": ["api", "content", ""],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "page_id",
									"value": "1",
									"description": "Optional: Filter by page"
								},
								{
									"key": "language_id",
									"value": "1",
									"description": "Optional: Filter by language"
								}
							]
						},
						"description": "Get paginated list of page contents with optional filters."
					}
				},
				{
					"name": "Create Page Content",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "page_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "language_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Welcome to Our Website",
									"type": "text"
								},
								{
									"key": "body",
									"value": "This is the main content of our homepage. We provide excellent services...",
									"type": "text"
								},
								{
									"key": "price",
									"value": "99.99",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cover_image",
									"type": "file",
									"src": "",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/content/",
							"host": ["{{base_url}}"],
							"path": ["api", "content", ""]
						},
						"description": "Create new page content with optional cover image upload."
					}
				},
				{
					"name": "Get Content by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/content/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "content", "1", ""]
						},
						"description": "Get specific page content by ID."
					}
				},
				{
					"name": "Update Page Content",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "language_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Updated Page Title",
									"type": "text"
								},
								{
									"key": "body",
									"value": "Updated content body with new information...",
									"type": "text"
								},
								{
									"key": "price",
									"value": "149.99",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cover_image",
									"type": "file",
									"src": "",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/content/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "content", "1", ""]
						},
						"description": "Update existing page content."
					}
				},
				{
					"name": "Delete Page Content",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/content/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "content", "1", ""]
						},
						"description": "Delete page content."
					}
				}
			],
			"description": "Content management endpoints for creating and managing multilingual page content."
		},
		{
			"name": "🌍 Language Management",
			"item": [
				{
					"name": "Get All Languages",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/language/?skip=0&limit=10&lang=en",
							"host": ["{{base_url}}"],
							"path": ["api", "language", ""],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "lang",
									"value": "en",
									"description": "Optional: Filter by language code",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of languages with optional filtering."
					}
				},
				{
					"name": "Create Language",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"en\",\n    \"name\": \"English\",\n    \"website_id\": {{website_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/language/",
							"host": ["{{base_url}}"],
							"path": ["api", "language", ""]
						},
						"description": "Create a new language for the website."
					}
				},
				{
					"name": "Get Language by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/language/1",
							"host": ["{{base_url}}"],
							"path": ["api", "language", "1"]
						},
						"description": "Get specific language by ID."
					}
				},
				{
					"name": "Update Language",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"American English\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/language/?lang=en",
							"host": ["{{base_url}}"],
							"path": ["api", "language", ""],
							"query": [
								{
									"key": "lang",
									"value": "en"
								}
							]
						},
						"description": "Update language information by language code."
					}
				},
				{
					"name": "Delete Language",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/language/1",
							"host": ["{{base_url}}"],
							"path": ["api", "language", "1"]
						},
						"description": "Delete a language and all its associated content."
					}
				}
			],
			"description": "Language management endpoints for multilingual website support."
		},
		{
			"name": "📰 Blog Management",
			"item": [
				{
					"name": "Get All Blogs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/blog/",
							"host": ["{{base_url}}"],
							"path": ["api", "blog", ""]
						},
						"description": "Get all blog posts for the current user's website."
					},
					"response": [
						{
							"name": "Success - Blog List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/blog/",
									"host": ["{{base_url}}"],
									"path": ["api", "blog", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"body\": \"This is my first blog post content. It contains useful information about our services and company updates.\",\n        \"website_id\": 1,\n        \"page_id\": 1,\n        \"language_code\": \"en\"\n    },\n    {\n        \"id\": 2,\n        \"body\": \"Another blog post with more interesting content about our latest features and improvements.\",\n        \"website_id\": 1,\n        \"page_id\": 2,\n        \"language_code\": \"en\"\n    }\n]"
						}
					]
				},
				{
					"name": "Create Blog Post",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"This is my first blog post content. It contains useful information about our services and company updates.\",\n    \"page_id\": 1,\n    \"language_id\": 1,\n    \"website_id\": {{website_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/blog/",
							"host": ["{{base_url}}"],
							"path": ["api", "blog", ""]
						},
						"description": "Create a new blog post."
					},
					"response": [
						{
							"name": "Success - Blog Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\": \"This is my first blog post content. It contains useful information about our services and company updates.\",\n    \"page_id\": 1,\n    \"language_id\": 1,\n    \"website_id\": 1\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/blog/",
									"host": ["{{base_url}}"],
									"path": ["api", "blog", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"body\": \"This is my first blog post content. It contains useful information about our services and company updates.\",\n    \"website_id\": 1,\n    \"page_id\": 1,\n    \"language_code\": \"en\"\n}"
						}
					]
				},
				{
					"name": "Get Blog by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/blog/1",
							"host": ["{{base_url}}"],
							"path": ["api", "blog", "1"]
						},
						"description": "Get specific blog post by ID."
					},
					"response": [
						{
							"name": "Success - Blog Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/blog/1",
									"host": ["{{base_url}}"],
									"path": ["api", "blog", "1"]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"body\": \"This is my first blog post content. It contains useful information about our services and company updates.\",\n    \"website_id\": 1,\n    \"page_id\": 1,\n    \"language_code\": \"en\"\n}"
						},
						{
							"name": "Blog Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/blog/999",
									"host": ["{{base_url}}"],
									"path": ["api", "blog", "999"]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Blog not found\"\n}"
						}
					]
				},
				{
					"name": "Update Blog Post",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"Updated blog content with new information and insights...\",\n    \"page_id\": 1,\n    \"language_id\": 1,\n    \"website_id\": {{website_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/blog/1",
							"host": ["{{base_url}}"],
							"path": ["api", "blog", "1"]
						},
						"description": "Update existing blog post using JSON format for consistency."
					},
					"response": [
						{
							"name": "Success - Blog Updated",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"body\": \"Updated blog content with new information and insights...\",\n    \"page_id\": 1,\n    \"language_id\": 1,\n    \"website_id\": 1\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/blog/1",
									"host": ["{{base_url}}"],
									"path": ["api", "blog", "1"]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"body\": \"Updated blog content with new information and insights...\",\n    \"website_id\": 1,\n    \"page_id\": 1,\n    \"language_code\": \"en\"\n}"
						}
					]
				},
				{
					"name": "Delete Blog Post",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/blog/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "blog", "1", ""]
						},
						"description": "Delete a blog post."
					},
					"response": [
						{
							"name": "Success - Blog Deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/blog/1/",
									"host": ["{{base_url}}"],
									"path": ["api", "blog", "1", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Blog post deleted successfully\"\n}"
						}
					]
				}
			],
			"description": "Blog management endpoints for creating and managing blog content."
		},
		{
			"name": "📢 Announcement Management",
			"item": [
				{
					"name": "Get All Announcements",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/announcement/",
							"host": ["{{base_url}}"],
							"path": ["api", "announcement", ""]
						},
						"description": "Get all announcements for the current user's website."
					},
					"response": [
						{
							"name": "Success - Announcements List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/announcement/",
									"host": ["{{base_url}}"],
									"path": ["api", "announcement", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"title\": \"Important Announcement\",\n        \"body\": \"We are pleased to announce our new service offerings...\",\n        \"cover_image\": \"https://example.com/media/announcement-cover.jpg\",\n        \"start_date\": \"2024-01-01T00:00:00\",\n        \"end_date\": \"2024-12-31T23:59:59\",\n        \"created_at\": \"2024-01-01T10:00:00\",\n        \"page_id\": 1,\n        \"website_id\": 1,\n        \"language_id\": 1\n    }\n]"
						}
					]
				},
				{
					"name": "Create Announcement",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "page_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "language_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Important Announcement",
									"type": "text"
								},
								{
									"key": "body",
									"value": "We are pleased to announce our new service offerings...",
									"type": "text"
								},
								{
									"key": "start_date",
									"value": "2024-01-01T00:00:00",
									"type": "text"
								},
								{
									"key": "end_date",
									"value": "2024-12-31T23:59:59",
									"type": "text"
								},
								{
									"key": "cover_image",
									"type": "file",
									"src": "",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/announcement/",
							"host": ["{{base_url}}"],
							"path": ["api", "announcement", ""]
						},
						"description": "Create a new announcement with optional cover image."
					},
					"response": [
						{
							"name": "Success - Announcement Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "page_id",
											"value": "1",
											"type": "text"
										},
										{
											"key": "language_id",
											"value": "1",
											"type": "text"
										},
										{
											"key": "title",
											"value": "Important Announcement",
											"type": "text"
										},
										{
											"key": "body",
											"value": "We are pleased to announce our new service offerings...",
											"type": "text"
										},
										{
											"key": "start_date",
											"value": "2024-01-01T00:00:00",
											"type": "text"
										},
										{
											"key": "end_date",
											"value": "2024-12-31T23:59:59",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/announcement/",
									"host": ["{{base_url}}"],
									"path": ["api", "announcement", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"title\": \"Important Announcement\",\n    \"body\": \"We are pleased to announce our new service offerings...\",\n    \"cover_image\": \"\",\n    \"start_date\": \"2024-01-01T00:00:00\",\n    \"end_date\": \"2024-12-31T23:59:59\",\n    \"created_at\": \"2024-01-01T10:00:00\",\n    \"page_id\": 1,\n    \"website_id\": 1,\n    \"language_id\": 1\n}"
						}
					]
				},
				{
					"name": "Get Announcement by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/announcement/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "announcement", "1", ""]
						},
						"description": "Get specific announcement by ID."
					},
					"response": [
						{
							"name": "Success - Announcement Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/announcement/1/",
									"host": ["{{base_url}}"],
									"path": ["api", "announcement", "1", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"title\": \"Important Announcement\",\n    \"body\": \"We are pleased to announce our new service offerings...\",\n    \"cover_image\": \"https://example.com/media/announcement-cover.jpg\",\n    \"start_date\": \"2024-01-01T00:00:00\",\n    \"end_date\": \"2024-12-31T23:59:59\",\n    \"created_at\": \"2024-01-01T10:00:00\",\n    \"page_id\": 1,\n    \"website_id\": 1,\n    \"language_id\": 1\n}"
						},
						{
							"name": "Announcement Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/announcement/999/",
									"host": ["{{base_url}}"],
									"path": ["api", "announcement", "999", ""]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Announcement not found\"\n}"
						}
					]
				},
				{
					"name": "Update Announcement",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "page_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "language_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Updated Announcement Title",
									"type": "text"
								},
								{
									"key": "body",
									"value": "Updated announcement content...",
									"type": "text"
								},
								{
									"key": "start_date",
									"value": "2024-01-01T00:00:00",
									"type": "text"
								},
								{
									"key": "end_date",
									"value": "2024-12-31T23:59:59",
									"type": "text"
								},
								{
									"key": "cover_image",
									"type": "file",
									"src": "",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/announcement/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "announcement", "1", ""]
						},
						"description": "Update existing announcement using form data for consistency with file uploads."
					},
					"response": [
						{
							"name": "Success - Announcement Updated",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "page_id",
											"value": "1",
											"type": "text"
										},
										{
											"key": "language_id",
											"value": "1",
											"type": "text"
										},
										{
											"key": "title",
											"value": "Updated Announcement Title",
											"type": "text"
										},
										{
											"key": "body",
											"value": "Updated announcement content...",
											"type": "text"
										},
										{
											"key": "start_date",
											"value": "2024-01-01T00:00:00",
											"type": "text"
										},
										{
											"key": "end_date",
											"value": "2024-12-31T23:59:59",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/announcement/1/",
									"host": ["{{base_url}}"],
									"path": ["api", "announcement", "1", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"title\": \"Updated Announcement Title\",\n    \"body\": \"Updated announcement content...\",\n    \"cover_image\": \"https://example.com/media/announcement-cover.jpg\",\n    \"start_date\": \"2024-01-01T00:00:00\",\n    \"end_date\": \"2024-12-31T23:59:59\",\n    \"created_at\": \"2024-01-01T10:00:00\",\n    \"page_id\": 1,\n    \"website_id\": 1,\n    \"language_id\": 1\n}"
						}
					]
				},
				{
					"name": "Delete Announcement",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/announcement/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "announcement", "1", ""]
						},
						"description": "Delete an announcement."
					},
					"response": [
						{
							"name": "Success - Announcement Deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/announcement/1/",
									"host": ["{{base_url}}"],
									"path": ["api", "announcement", "1", ""]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"title\": \"Important Announcement\",\n    \"body\": \"We are pleased to announce our new service offerings...\",\n    \"cover_image\": \"https://example.com/media/announcement-cover.jpg\",\n    \"start_date\": \"2024-01-01T00:00:00\",\n    \"end_date\": \"2024-12-31T23:59:59\",\n    \"created_at\": \"2024-01-01T10:00:00\",\n    \"page_id\": 1,\n    \"website_id\": 1,\n    \"language_id\": 1\n}"
						}
					]
				}
			],
			"description": "Announcement management endpoints for time-bound announcements."
		},
		{
			"name": "🏷️ Meta Tags Management",
			"item": [
				{
					"name": "Get All Meta Tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/metatag/",
							"host": ["{{base_url}}"],
							"path": ["api", "metatag", ""]
						},
						"description": "Get all meta tags for SEO optimization."
					}
				},
				{
					"name": "Create Meta Tag",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Homepage - My Awesome Website\",\n    \"description\": \"Welcome to our website where we provide excellent services and solutions for your business needs.\",\n    \"keywords\": \"business, services, solutions, website, company\",\n    \"page_id\": 1,\n    \"language_id\": 1,\n    \"website_id\": {{website_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/metatag/",
							"host": ["{{base_url}}"],
							"path": ["api", "metatag", ""]
						},
						"description": "Create new meta tags for SEO optimization."
					}
				},
				{
					"name": "Get Meta Tag by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/metatag/1",
							"host": ["{{base_url}}"],
							"path": ["api", "metatag", "1"]
						},
						"description": "Get specific meta tag by ID."
					}
				},
				{
					"name": "Update Meta Tag",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Page Title - My Website\",\n    \"description\": \"Updated description for better SEO ranking and user engagement.\",\n    \"keywords\": \"updated, keywords, seo, optimization\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/metatag/1",
							"host": ["{{base_url}}"],
							"path": ["api", "metatag", "1"]
						},
						"description": "Update existing meta tags."
					}
				},
				{
					"name": "Delete Meta Tag",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/metatag/1/",
							"host": ["{{base_url}}"],
							"path": ["api", "metatag", "1", ""]
						},
						"description": "Delete meta tags."
					}
				}
			],
			"description": "Meta tags management for SEO optimization of pages."
		},
		{
			"name": "🔧 Metadata & Dynamic Forms",
			"item": [
				{
					"name": "Get Models Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has models metadata', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('models');",
									"    pm.expect(jsonData.models).to.be.an('object');",
									"    ",
									"    // Check if metadata has enhanced structure",
									"    const modelNames = Object.keys(jsonData.models);",
									"    if (modelNames.length > 0) {",
									"        const firstModel = jsonData.models[modelNames[0]];",
									"        const fieldNames = Object.keys(firstModel);",
									"        if (fieldNames.length > 0) {",
									"            const firstField = firstModel[fieldNames[0]];",
									"            pm.expect(firstField).to.have.property('input_type');",
									"            pm.expect(firstField).to.have.property('constraints');",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/metadata/models",
							"host": ["{{base_url}}"],
							"path": ["api", "metadata", "models"]
						},
						"description": "Get enhanced metadata for all database models to enable dynamic form generation. Returns input types, validation constraints, and field information for frontend form builders."
					},
					"response": [
						{
							"name": "Success - Enhanced Metadata",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/metadata/models",
									"host": ["{{base_url}}"],
									"path": ["api", "metadata", "models"]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"models\": {\n        \"User\": {\n            \"username\": {\n                \"input_type\": \"text\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {\n                    \"maxLength\": 50,\n                    \"unique\": true\n                }\n            },\n            \"email\": {\n                \"input_type\": \"email\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {\n                    \"maxLength\": 100,\n                    \"pattern\": \"^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$\"\n                }\n            },\n            \"is_active\": {\n                \"input_type\": \"checkbox\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {\n                    \"default\": \"True\"\n                }\n            },\n            \"is_superuser\": {\n                \"input_type\": \"checkbox\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {\n                    \"default\": \"False\"\n                }\n            }\n        },\n        \"Blog\": {\n            \"body\": {\n                \"input_type\": \"textarea\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {}\n            },\n            \"website_id\": {\n                \"input_type\": \"select\",\n                \"nullable\": true,\n                \"primary_key\": false,\n                \"constraints\": {},\n                \"foreign_key\": {\n                    \"target_table\": \"websites\",\n                    \"target_model\": \"Website\",\n                    \"target_field\": \"id\"\n                }\n            },\n            \"page_id\": {\n                \"input_type\": \"select\",\n                \"nullable\": true,\n                \"primary_key\": false,\n                \"constraints\": {},\n                \"foreign_key\": {\n                    \"target_table\": \"pages\",\n                    \"target_model\": \"Page\",\n                    \"target_field\": \"id\"\n                }\n            },\n            \"language_code\": {\n                \"input_type\": \"text\",\n                \"nullable\": true,\n                \"primary_key\": false,\n                \"constraints\": {}\n            }\n        },\n        \"Announcement\": {\n            \"title\": {\n                \"input_type\": \"text\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {}\n            },\n            \"body\": {\n                \"input_type\": \"textarea\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {}\n            },\n            \"cover_image\": {\n                \"input_type\": \"text\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {}\n            },\n            \"start_date\": {\n                \"input_type\": \"datetime-local\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {}\n            },\n            \"end_date\": {\n                \"input_type\": \"datetime-local\",\n                \"nullable\": false,\n                \"primary_key\": false,\n                \"constraints\": {}\n            }\n        }\n    }\n}"
						}
					]
				}
			],
			"description": "Enhanced metadata endpoints for dynamic form generation with smart input types and validation rules."
		},
		{
			"name": "📁 File Management",
			"item": [
				{
					"name": "Access Media Files",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/media/example-image.jpg",
							"host": ["{{base_url}}"],
							"path": ["media", "example-image.jpg"]
						},
						"description": "Access uploaded media files. This endpoint serves static files."
					}
				},
				{
					"name": "Upload File (TinyFile)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/tinyfile/",
							"host": ["{{base_url}}"],
							"path": ["api", "tinyfile", ""]
						},
						"description": "Upload files through the TinyFile endpoint."
					}
				}
			],
			"description": "File management endpoints for uploading and accessing media files."
		}
	]
} 